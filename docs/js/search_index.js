var search_data = {"index":{"searchIndex":["planter","config","generators","initializergenerator","seedergenerator","seeder","version","config()","configure()","create_initializer_file()","csv_name()","erb_trim_mode()","generate_seeders()","model()","new()","number_of_records()","parent()","reset_config()","seed()","seed()","seed_method()","seeding_method()","to_a()","to_h()","to_s()","unique_columns()","readme"],"longSearchIndex":["planter","planter::config","planter::generators","planter::generators::initializergenerator","planter::generators::seedergenerator","planter::seeder","planter::version","planter::config()","planter::configure()","planter::generators::initializergenerator#create_initializer_file()","planter::seeder#csv_name()","planter::seeder#erb_trim_mode()","planter::generators::seedergenerator#generate_seeders()","planter::seeder#model()","planter::config::new()","planter::seeder#number_of_records()","planter::seeder#parent()","planter::reset_config()","planter::seed()","planter::seeder#seed()","planter::seeder#seed_method()","planter::seeder::seeding_method()","planter::version::to_a()","planter::version::to_h()","planter::version::to_s()","planter::seeder#unique_columns()",""],"info":[["Planter","","Planter.html","","<p>The main module for the plugin. It nicely wraps the <code>Planter::Config</code> class so that you can customize the …\n"],["Planter::Config","","Planter/Config.html","","<p>Configure the application seeder.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Planter</span>.<span class=\"ruby-identifier\">configure</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">seeder</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">seeder</span>.<span class=\"ruby-identifier\">seeders</span> = <span class=\"ruby-node\">%i[users]</span> }\n</pre>\n"],["Planter::Generators","","Planter/Generators.html","",""],["Planter::Generators::InitializerGenerator","","Planter/Generators/InitializerGenerator.html","",""],["Planter::Generators::SeederGenerator","","Planter/Generators/SeederGenerator.html","",""],["Planter::Seeder","","Planter/Seeder.html","","<p>Class that seeders should inherit from. Seeders should be in <code>db/seeds</code>, and named <code>TABLE_seeder.rb</code>, where …\n"],["Planter::Version","","Planter/Version.html","","<p>Module that contains all gem version information. Follows semantic versioning. Read: semver.org/\n"],["config","Planter","Planter.html#method-c-config","()","<p>The seeder configuration.\n<p>@return [Planter::Config]\n"],["configure","Planter","Planter.html#method-c-configure","()","<p>Quick way of configuring the directories via an initializer.\n<p>@return [Planter::Config]\n<p>@example\n"],["create_initializer_file","Planter::Generators::InitializerGenerator","Planter/Generators/InitializerGenerator.html#method-i-create_initializer_file","()",""],["csv_name","Planter::Seeder","Planter/Seeder.html#method-i-csv_name","","<p>The csv file corresponding to the model.\n<p>@return [String]\n"],["erb_trim_mode","Planter::Seeder","Planter/Seeder.html#method-i-erb_trim_mode","","<p>What trim mode should ERB use?\n<p>@return [String]\n"],["generate_seeders","Planter::Generators::SeederGenerator","Planter/Generators/SeederGenerator.html#method-i-generate_seeders","()",""],["model","Planter::Seeder","Planter/Seeder.html#method-i-model","","<p>The model for the table being seeded. If the model name you need is different, change via <code>seeding_method</code> …\n"],["new","Planter::Config","Planter/Config.html#method-c-new","()","<p>Create a new instance of the config.\n"],["number_of_records","Planter::Seeder","Planter/Seeder.html#method-i-number_of_records","","<p>The number of records to create from each record in the <code>data</code> array. If nil, defaults to 1, but you can …\n"],["parent","Planter::Seeder","Planter/Seeder.html#method-i-parent","","<p>The model of the parent. When provided with <code>association</code>, records in the <code>data</code> array, will be created for …\n"],["reset_config","Planter","Planter.html#method-c-reset_config","()","<p>Resets the config back to its initial state.\n<p>@return [Planter::Config]\n"],["seed","Planter","Planter.html#method-c-seed","()","<p>This is the method to call from your <code>db/seeds.rb</code>. It callse the seeders listed in <code>Planter.config.seeders</code> …\n"],["seed","Planter::Seeder","Planter/Seeder.html#method-i-seed","()","<p>The default seed method. To use this method, your class must provide a valid <code>seeding_method</code>, and not …\n"],["seed_method","Planter::Seeder","Planter/Seeder.html#method-i-seed_method","","<p>The seeding method specified.\n<p>@return [Symbol]\n"],["seeding_method","Planter::Seeder","Planter/Seeder.html#method-c-seeding_method","( seed_method, number_of_records: 1, model: nil, parent: nil, csv_name: nil, unique_columns: nil, erb_trim_mode: nil )","<p>If your class is going to use the inherited <code>seed</code> method, you must tell it which <code>seeding_method</code> to use. …\n"],["to_a","Planter::Version","Planter/Version.html#method-c-to_a","()","<p>Version as +[MAJOR, MINOR, PATCH]+\n<p>@return [Array]\n"],["to_h","Planter::Version","Planter/Version.html#method-c-to_h","()","<p>Version as +{major: MAJOR, minor: MINOR, patch: PATCH}+\n<p>@return [Hash]\n"],["to_s","Planter::Version","Planter/Version.html#method-c-to_s","()","<p>Version as <code>MAJOR.MINOR.PATCH</code>\n<p>@return [String]\n"],["unique_columns","Planter::Seeder","Planter/Seeder.html#method-i-unique_columns","","<p>When creating a record, the fields that will be used to look up the record. If it already exists, a new …\n"],["README","","README_md.html","","<p>Planter\n<p><img src=\"https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fevanthegrayt%2Fplanter%2Fbadge%3Fref%3Dmaster&style=flat\"> …\n\n<blockquote>"]]}}